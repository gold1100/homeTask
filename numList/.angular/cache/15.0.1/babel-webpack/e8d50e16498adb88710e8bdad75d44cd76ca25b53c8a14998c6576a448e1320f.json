{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction AppComponent_h6_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h6\");\n    i0.ɵɵtext(1, \"Valid input contains digits and commas(,) only\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.numbers = \"\";\n    this.error = false;\n    this.title = 'numList';\n  }\n  callSortApi(numbers, order) {\n    let numArray = this.validateInput(numbers);\n    console.log(numArray);\n  }\n  validateInput(numbers) {\n    let numArray = numbers.split(\",\").map(str => {\n      if (isNaN(Number(str))) {\n        this.error = true;\n        throw new Error(\"invalid input\");\n      }\n      return Number(str);\n    });\n    return numArray;\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"everything\"], [1, \"input\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngIf\"], [1, \"btnContainer\"], [1, \"button\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.numbers = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, AppComponent_h6_2_Template, 2, 0, \"h6\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_4_listener() {\n          return ctx.callSortApi(ctx.numbers, \"asc\");\n        });\n        i0.ɵɵtext(5, \"sort ASC\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n          return ctx.callSortApi(ctx.numbers, \"desc\");\n        });\n        i0.ɵɵtext(7, \"sort DESC\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.numbers);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".everything[_ngcontent-%COMP%]{\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.btnContainer[_ngcontent-%COMP%]{\\r\\n  margin-top: 5px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.button[_ngcontent-%COMP%]{\\r\\n  width: 60px;\\r\\n  height: 40px;\\r\\n  margin: 1px;\\r\\n}\\n/*# sourceURL=webpack://./src/app/app.component.css */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGVBQWU7RUFDZixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osV0FBVztBQUNiIiwic291cmNlc0NvbnRlbnQiOlsiLmV2ZXJ5dGhpbmd7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG4uYnRuQ29udGFpbmVye1xyXG4gIG1hcmdpbi10b3A6IDVweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuXHJcbi5idXR0b257XHJcbiAgd2lkdGg6IDYwcHg7XHJcbiAgaGVpZ2h0OiA0MHB4O1xyXG4gIG1hcmdpbjogMXB4O1xyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;IAEEA,0BAAkB;IAAAA,8DAA8C;IAAAA,iBAAK;;;ACMvE,OAAM,MAAOC,YAAY;EALzBC;IAME,YAAO,GAAW,EAAE;IACpB,UAAK,GAAY,KAAK;IAoBtB,UAAK,GAAG,SAAS;;EAlBnBC,WAAW,CAACC,OAAe,EAAEC,KAAa;IACxC,IAAIC,QAAQ,GAAkB,IAAI,CAACC,aAAa,CAACH,OAAO,CAAC;IACzDI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EACvB;EAEAC,aAAa,CAACH,OAAgB;IAC1B,IAAIE,QAAQ,GAAmBF,OAAO,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAG,IAAG;MAC1D,IAAGC,KAAK,CAACC,MAAM,CAACF,GAAG,CAAC,CAAC,EAAC;QACpB,IAAI,CAACG,KAAK,GAAG,IAAI;QACjB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;;MAElC,OAAOF,MAAM,CAACF,GAAG,CAAC;IACpB,CAAC,CAAC;IACF,OAAON,QAAQ;EACjB;EAAC;qBAlBUL,YAAY;EAAA;EAAA;UAAZA,YAAY;IAAAgB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDRzBrB,8BAAwB;QACfA;UAAA;QAAA,EAAqB;QAA5BA,iBAA2C;QAC3CA,2DAAqE;QACvEA,iBAAM;QACNA,8BAA0B;QACDA;UAAA,OAASsB,6BAAqB,KAAK,CAAC;QAAA,EAAC;QAACtB,wBAAQ;QAAAA,iBAAS;QAC9EA,iCAA6D;QAAtCA;UAAA,OAASsB,6BAAoB,MAAM,CAAC;QAAA,EAAC;QAACtB,yBAAS;QAAAA,iBAAS;;;QALxEA,eAAqB;QAArBA,qCAAqB;QACvBA,eAAW;QAAXA,gCAAW","names":["i0","AppComponent","constructor","callSortApi","numbers","order","numArray","validateInput","console","log","split","map","str","isNaN","Number","error","Error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["F:\\Programming\\VsCode\\angularTask\\numList\\src\\app\\app.component.html","F:\\Programming\\VsCode\\angularTask\\numList\\src\\app\\app.component.ts"],"sourcesContent":["<div class=\"everything\">\n  <input [(ngModel)]=\"numbers\" class=\"input\">\n  <h6 *ngIf=\"error\">Valid input contains digits and commas(,) only</h6>\n</div>\n<div class=\"btnContainer\">\n  <button class=\"button\" (click)=\"callSortApi(numbers, 'asc')\">sort ASC</button>\n  <button class=\"button\" (click)=\"callSortApi(numbers,'desc')\">sort DESC</button>\n</div>\n\n","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  numbers: string = \"\";\n  error: boolean = false;\n\ncallSortApi(numbers: string, order: string) {\n  let numArray: Array<number> = this.validateInput(numbers);\n  console.log(numArray);\n}\n\nvalidateInput(numbers : String) : Array<number>{\n    let numArray : Array<number> = numbers.split(\",\").map(str => {\n      if(isNaN(Number(str))){\n        this.error = true;\n        throw new Error(\"invalid input\");\n      }\n      return Number(str);\n    })\n    return numArray;\n  };\n\n\n\n  title = 'numList';\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}